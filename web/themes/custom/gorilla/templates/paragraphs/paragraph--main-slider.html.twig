{#
/**
* @file
* Default theme implementation to display a paragraph.
*
* Available variables:
* - paragraph: Full paragraph entity.
* Only method names starting with "get", "has", or "is" and a few common
* methods such as "id", "label", and "bundle" are available. For example:
* - paragraph.getCreatedTime() will return the paragraph creation timestamp.
* - paragraph.id(): The paragraph ID.
* - paragraph.bundle(): The type of the paragraph, for example, "image" or
"text".
* - paragraph.getOwnerId(): The user ID of the paragraph author.
* See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
* and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
* or print a subset such as {{ content.field_example }}. Use
* {{ content|without('field_example') }} to temporarily suppress the printing
* of a given child element.
* - attributes: HTML attributes for the containing element.
* The attributes.class element may contain one or more of the following
* classes:
* - paragraphs: The current template type (also known as a "theming hook").
* - paragraphs--type-[type]: The current paragraphs type. For example, if the
paragraph is an
* "Image" it would result in "paragraphs--type--image". Note that the machine
* name will often be in a short form of the human readable label.
* - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for
example, a
* preview would result in: "paragraphs--view-mode--preview", and
* default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
* current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
* is an administrator.
*
* @see template_preprocess_paragraph()
*
* @ingroup themeable
*/
#}
{%
set classes = [
'main-slider',
'paragraph--main-slider-home.html',
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}

{% block paragraph %}
  <section {{ attributes.addClass(classes) }}>
    <div class="js-main-slider main-slider__slider p-0 m-0">
    {% block content %}
      {% for item in prep.slides %}
        {% set color = item.color_identity['#items'].value %}
        {% set image = item.image[0] %}
        {% set text = item.text[0] %}
        {% set link = item.link[0] %}
        {% set title = item.title[0] %}
        <div class="main-slider-card main-slider-card--{{color}}">
          <div class="row g-0">
            <div class="main-slider-card__container-image col-lg-6">
              <figure class="main-slider-card__image">{{image}}</figure>
            </div>
            <div class="main-slider-card__caption col-lg-6">
              <div class="main-slider-card__text-content">
                <header class="main-slider-card__title"><h2>{{title}}</h2></header>
                <div class="main-slider-card__text">
                  {{text}}
                </div>
                <div class="main-slider-card__link">
                  {% if link['#title'].value %}
                    <a class="btn-primary" href="{{link['#url'].value}}" target="">
                      <span>{{link['#title'].value}}</span>
                    </a>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
    <div class="slider-controls slider-controls__arrows js_gn_carousel_controls">
      <div class="slider-controls__prev slider-controls__arrow js_gn_carousel__prev_arrow">
        <span>￩</span>
      </div>
      <div class="slider-controls__next slider-controls__arrow js_gn_carousel__next_arrow">
        <span>￫</span>
      </div>
    </div>
    <div class="main-slider__dots slider-controls slider-controls__dots js_gn_carousel_controls">
      <div class="container">
        <div class="js_gn_carousel__dots dots-blue"></div>
      </div>
    </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
